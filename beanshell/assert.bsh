import org.apache.jmeter.common.utils.StringUtil;


/**
 * 根据判断条件，当 condition=true时，停止当前 sample，输出错误信息（不知道为啥中文乱码，暂时用英文提示）
 */
void stopThread(boolean condition, String samplerResult, String expectionResult) {
	if( condition ) {
		Failure = true;
		FailureMessage = "Test failed!! SamplerResult=" + samplerResult + ", ExpectionResult=" + expectionResult;
		Response.setStopThread(true);
	}
}

/**
 * 根据判断条件，当 condition=true时，停止当前 sample，输出自定义错误信息
 */
void stopThread(boolean condition, String errorMsg) {
	if( condition ) {
		Failure = true;
		FailureMessage = errorMsg;
		Response.setStopThread(true);
	}
}

/**
 * 断言 SQL结果数
 */
void assertSqlResultSize(String tableName, int resultSize) {
	Object tableObj = vars.getObject(tableName);
	// 判断JDBC Request中是否有正确设置表结果变量
	if(tableObj != null) {
		int tableResultSize = tableObj.size();
		String samplerResult = String.valueOf(tableResultSize);
		String expectionResult = String.valueOf(resultSize);
		boolean condition = (tableResultSize != resultSize);
		stopThread(condition, samplerResult, expectionResult);
	}else {
		String errorMsg = "TableName variable does not exist.";
		log.error(errorMsg);
		stopThread(true, errorMsg);
	}
}

/**
 * 断言 SQL结果数，带自定义错误信息
 */
void assertSqlResultSize(String tableName, int resultSize, String errorMsg) {
	Object tableObj = vars.getObject(tableName);
	// 判断JDBC Request中是否有正确设置表结果变量
	if(tableObj != null) {
		int tableResultSize = tableObj.size();
		String testResult = String.valueOf(tableResultSize);
		String expectionResult = String.valueOf(resultSize);
		stopThread(tableResultSize != resultSize, errorMsg);
	}else {
		String errorMsg = "tableName variable does not exist.";
		log.info(errorMsg);
		stopThread(true, errorMsg);
	}
}

/**
 * 断言 String是否相等
 */
void assertEquals(String actual, String expected) {
	boolean condition = !actual.equals(expected);
	stopThread(condition, actual, expected);
}

/**
 * 断言 String是否相等，带自定义错误信息
 */
void assertEquals(String actual, String expected, String errorMsg) {
	boolean condition = !actual.equals(expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言 int是否相等
 */
void assertEquals(int actual, int expected) {
	boolean condition = !(actual==expected);
	stopThread(condition, String.valueOf(actual), String.valueOf(expected));
}

/**
 * 断言 int是否相等，带自定义错误信息
 */
void assertEquals(int actual, int expected, String errorMsg) {
	boolean condition = !(actual==expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言 float是否相等
 */
void assertEquals(float actual, float expected) {
	boolean condition = !(actual==expected);
	stopThread(condition, String.valueOf(actual), String.valueOf(expected));
}

/**
 * 断言 float是否相等，带自定义错误信息
 */
void assertEquals(float actual, float expected, String errorMsg) {
	boolean condition = !(actual==expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言 String是否不相等
 */
void assertNotEquals(String actual, String expected) {
	boolean condition = actual.equals(expected);
	stopThread(condition, actual, expected);
}

/**
 * 断言 String是否不相等，带自定义错误信息
 */
void assertNotEquals(String actual, String expected, String errorMsg) {
	boolean condition = actual.equals(expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言 int是否不相等
 */
void assertNotEquals(int actual, int expected) {
	boolean condition = (actual==expected);
	stopThread(condition, String.valueOf(actual), String.valueOf(expected));
}

/**
 * 断言 int是否不相等，带自定义错误信息
 */
void assertNotEquals(int actual, int expected, String errorMsg) {
	boolean condition = (actual==expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言 float是否不相等
 */
void assertNotEquals(float actual, float expected) {
	boolean condition = (actual==expected);
	stopThread(condition, String.valueOf(actual), String.valueOf(expected));
}

/**
 * 断言 float是否不相等，带自定义错误信息
 */
void assertNotEquals(float actual, float expected, String errorMsg) {
	boolean condition = (actual==expected);
	stopThread(condition, errorMsg);
}

/**
 * 断言是否为 true
 */
void assertTrue(boolean actual) {
	boolean condition = !(actual && true);
	stopThread(condition, String.valueOf(actual), "true");
}

/**
 * 断言是否为 false
 */
void assertFalse(boolean actual) {
	boolean condition = !(!actual && true);
	stopThread(condition, String.valueOf(actual), "false");
}

/**
 * 断言是否为 true，带自定义错误信息
 */
void assertTrue(boolean actual, String errorMsg) {
	boolean condition = !(actual && true);
	stopThread(condition, errorMsg);
}

/**
 * 断言是否为 false，带自定义错误信息
 */
void assertFalse(boolean actual, String errorMsg) {
	boolean condition = !(!actual && true);
	stopThread(condition, errorMsg);
}

/**
 * 断言 String是否非 null
 */
void assertNotNull(String actual) {
	boolean condition = (actual == null);
	String actualString = actual == null ? "null" : actual;
	stopThread(condition, actualString, "null");
}

/**
 * 断言 String是否非 null，带自定义错误信息
 */
void assertNotNull(String actual, String errorMsg) {
	boolean condition = (actual == null);
	stopThread(condition, errorMsg);
}

/**
 * 断言 String是否为 null
 */
void assertNull(String actual) {
	boolean condition = (actual != null);
	String actualString = actual == null ? "null" : actual;
	stopThread(condition, actualString, "not null");
}

/**
 * 断言 String是否为 null，带自定义错误信息
 */
void assertNull(String actual, String errorMsg) {
	boolean condition = (actual != null);
	stopThread(condition, errorMsg);
}

