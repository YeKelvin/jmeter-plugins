import pers.kelvin.util.StringUtil;


/**
 * 根据判断条件，condition=true时，停止当前 sample，输出错误信息（不知道为啥中文乱码，暂时用英文提示）
 */
void stopThreadWithCondition(boolean condition, String testResult, String expectionResult) {
	if( condition ) {
		Failure = true;
		FailureMessage = "Test failed!! TestResult=" + testResult + ", ExpectionResult=" + expectionResult;
		Response.setStopThread(true);
	}
}

/**
 * 根据判断条件，condition=true时，停止当前 sample，输出自定义错误信息
 */
void stopThreadWithCondition(boolean condition, String errorMessage) {
	if( condition ) {
		Failure = true;
		FailureMessage = errorMessage;
		Response.setStopThread(true);
	}
}

/**
 * 断言 SQL结果数
 */
void assertSqlResultsSize(String tableName, int resultsSize) {
	Object tableObj = vars.getObject(tableName);
	// 判断JDBC Request中是否有正确设置表结果变量
	if(tableObj != null) {
		int tableResultSize = tableObj.size();
		String testResult = String.valueOf(tableResultSize);
		String expectionResult = String.valueOf(resultsSize);
		stopThreadWithCondition(tableResultSize != resultsSize, testResult, expectionResult);
	}else {
		String errorMsg = "tableName variable does not exist.";
		log.info(errorMsg);
		stopThreadWithCondition(true, errorMsg);
	}
}

/**
 * 断言 SQL结果数，带自定义错误信息
 */
void assertSqlResultsSize(String tableName, int resultsSize, String errorMessage) {
	Object tableObj = vars.getObject(tableName);
	// 判断JDBC Request中是否有正确设置表结果变量
	if(tableObj != null) {
		int tableResultSize = tableObj.size();
		String testResult = String.valueOf(tableResultSize);
		String expectionResult = String.valueOf(resultsSize);
		stopThreadWithCondition(tableResultSize != resultsSize, errorMessage);
	}else {
		String errorMsg = "tableName variable does not exist.";
		log.info(errorMsg);
		stopThreadWithCondition(true, errorMsg);
	}
}

/**
 * 断言 String是否相等
 */
void assertEquals(String testData, String expection) {
	stopThreadWithCondition(!testData.equals(expection), testData, expection);
}

/**
 * 断言 String是否相等，带自定义错误信息
 */
void assertEquals(String testData, String expection, String errorMessage) {
	stopThreadWithCondition(!testData.equals(expection), errorMessage);
}

/**
 * 断言 int是否相等
 */
void assertEquals(int testData, int expection) {
	stopThreadWithCondition(!(testData==expection),
							String.valueOf(testData),
							String.valueOf(expection));
}

/**
 * 断言 int是否相等，带自定义错误信息
 */
void assertEquals(int testData, int expection, String errorMessage) {
	stopThreadWithCondition(!(testData==expection), errorMessage);
}

/**
 * 断言 float是否相等
 */
void assertEquals(float testData, float expection) {
	stopThreadWithCondition(!(testData==expection),
							String.valueOf(testData),
							String.valueOf(expection));
}

/**
 * 断言 float是否相等，带自定义错误信息
 */
void assertEquals(float testData, float expection, String errorMessage) {
	stopThreadWithCondition(!(testData==expection), errorMessage);
}

/**
 * 断言 String是否不相等
 */
void assertNotEquals(String testData, String expection) {
	stopThreadWithCondition(testData.equals(expection), testData, expection);
}

/**
 * 断言 String是否不相等，带自定义错误信息
 */
void assertNotEquals(String testData, String expection, String errorMessage) {
	stopThreadWithCondition(testData.equals(expection), errorMessage);
}

/**
 * 断言 int是否不相等
 */
void assertNotEquals(int testData, int expection) {
	stopThreadWithCondition((testData==expection),
							String.valueOf(testData),
							String.valueOf(expection));
}

/**
 * 断言 int是否不相等，带自定义错误信息
 */
void assertNotEquals(int testData, int expection, String errorMessage) {
	stopThreadWithCondition((testData==expection), errorMessage);
}

/**
 * 断言 float是否不相等
 */
void assertNotEquals(float testData, float expection) {
	stopThreadWithCondition((testData==expection),
							String.valueOf(testData),
							String.valueOf(expection));
}

/**
 * 断言 float是否不相等，带自定义错误信息
 */
void assertNotEquals(float testData, float expection, String errorMessage) {
	stopThreadWithCondition((testData==expection), errorMessage);
}

/**
 * 断言是否为 true
 */
void assertTrue(boolean testData) {
	stopThreadWithCondition(!(testData && true), String.valueOf(testData), "true");
}

/**
 * 断言是否为 false
 */
void assertFalse(boolean testData) {
	stopThreadWithCondition(!(!testData && true), String.valueOf(testData), "false");
}

/**
 * 断言是否为 true，带自定义错误信息
 */
void assertTrue(boolean testData, String errorMessage) {
	stopThreadWithCondition(!(testData && true), errorMessage);
}

/**
 * 断言是否为 false，带自定义错误信息
 */
void assertFalse(boolean testData, String errorMessage) {
	stopThreadWithCondition(!(!testData && true), errorMessage);
}

/**
 * 断言 String是否非 null
 */
void assertNotNull(String testData) {
	String testDataStr = testData == null ? "null" : testData;
	stopThreadWithCondition((testData == null), testDataStr, "null");
}

/**
 * 断言 String是否非 null，带自定义错误信息
 */
void assertNotNull(String testData, String errorMessage) {
	stopThreadWithCondition((testData == null), errorMessage);
}

/**
 * 断言 String是否为 null
 */
void assertNull(String testData) {
	String testDataStr = testData == null ? "null" : testData;
	stopThreadWithCondition((testData != null), testDataStr, "not null");
}

/**
 * 断言 String是否为 null，带自定义错误信息
 */
void assertNull(String testData, String errorMessage) {
	stopThreadWithCondition((testData != null), errorMessage);
}

